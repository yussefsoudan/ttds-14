{"ast":null,"code":"import _slicedToArray from\"/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./App.css';import SearchPage from\"./views/SearchPage.js\";import React,{useState,useEffect}from\"react\";import findQuote from\"./api/findQuote.js\";import setUp from\"./api/setUp.js\";import{jsx as _jsx}from\"react/jsx-runtime\";function App(){var _useState=useState({connectDB:{isLoading:false,error:\"\"}}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];// useEffect(() => {\n//     const setUpRequest = async () => {\n//       setState({ ...state, connectDB: { ...state.connectDB, isLoading: true } });\n//       await setUp()\n//         .then(response => {\n//           console.log(response);\n//           setState({\n//             ...state,\n//             connectDB: {\n//               isLoading: false,\n//             }\n//           });\n//         })\n//         .catch(errorResponse => {\n//           setState({\n//             ...state,\n//             connectDB: { isLoading: false, error: errorResponse }\n//           });\n//         });\n//     };\n//     setUpRequest();\n//   }, []); // empty list of dependencies ensures the hooks is only called upon rendering of the component\nreturn/*#__PURE__*/ (//TODO: Display different component in case of a db connection error \n_jsx(\"div\",{children:/*#__PURE__*/_jsx(SearchPage,{})}));}export default App;// class App extends React.Component {\n//   constructor(props) {\n//       super(props);\n//       this.state = { apiResponse: \"\" , quoteId: \"\"};\n//       this.getQuoteId = this.getQuoteId.bind(this);\n//       this.findQuote = this.findQuote.bind(this);\n//       this.setApiResponse = this.setApiResponse.bind(this);\n//   }\n//   async callAPI(route, options) {\n//     let quote = await fetch(`http://localhost:9000/${route}`, options);\n//     let res = await quote.json();\n//     console.log(\"res in callAPI is: \" + JSON.stringify(res));\n//     return res;\n//   }\n//   getQuoteId(event) {\n//     this.setState({quoteId: event.target.value});\n//   }\n//   setApiResponse(res) {\n//     // alert(\"res: \" + res);\n//     console.log(\"res in setAPIResponse: \" + JSON.stringify(res));\n//     this.setState({apiResponse: JSON.stringify(res.quote)});\n//   }\n//   async findQuote(event) {\n//     event.preventDefault();\n//     const requestOptions = {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({_id: this.state.quoteId})\n//     };\n//     let res = await this.callAPI(\"findQuote\", requestOptions);\n//     console.log(\"res in findQuote: \" + JSON.stringify(res));\n//     this.setApiResponse(res);\n//   }\n//   async componentDidMount() {\n//     let res = await this.callAPI(\"setUp\", {});\n//     console.log(res);\n//   }\n//   render() {\n//       return (\n//           <div>\n//               <SearchPage/>\n//               <input type=\"text\" value={this.state.quoteId} onChange={this.getQuoteId}></input>\n//               <button onClick={this.findQuote}>Click me</button>\n//               <p>{this.state.apiResponse}</p>\n//           </div>\n//       );\n//   }\n// }","map":{"version":3,"sources":["/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/src/App.js"],"names":["SearchPage","React","useState","useEffect","findQuote","setUp","App","connectDB","isLoading","error","state","setState"],"mappings":"wKAAA,MAAO,WAAP,CACA,MAAOA,CAAAA,UAAP,KAAuB,uBAAvB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,QAAhB,CAAyBC,SAAzB,KAA0C,OAA1C,CACA,MAAOC,CAAAA,SAAP,KAAsB,oBAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,C,2CAEA,QAASC,CAAAA,GAAT,EAAc,eACgBJ,QAAQ,CAAC,CAC/BK,SAAS,CAAC,CACNC,SAAS,CAAC,KADJ,CAENC,KAAK,CAAC,EAFA,CADqB,CAAD,CADxB,wCACHC,KADG,eACIC,QADJ,eASV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,oBACI;AACA,kCACA,KAAC,UAAD,IADA,EAFJ,EAMH,CACD,cAAeL,CAAAA,GAAf,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import './App.css';\nimport SearchPage from \"./views/SearchPage.js\";\nimport React, { useState,useEffect } from \"react\";\nimport findQuote from \"./api/findQuote.js\";\nimport setUp from \"./api/setUp.js\"\n\nfunction App(){\n    const [state, setState] = useState({\n        connectDB:{\n            isLoading:false,\n            error:\"\"\n        }\n    });\n\n\n    // useEffect(() => {\n    //     const setUpRequest = async () => {\n    //       setState({ ...state, connectDB: { ...state.connectDB, isLoading: true } });\n    //       await setUp()\n    //         .then(response => {\n    //           console.log(response);\n    //           setState({\n    //             ...state,\n    //             connectDB: {\n    //               isLoading: false,\n    //             }\n    //           });\n    //         })\n    //         .catch(errorResponse => {\n    //           setState({\n    //             ...state,\n    //             connectDB: { isLoading: false, error: errorResponse }\n    //           });\n    //         });\n    //     };\n    \n    //     setUpRequest();\n        \n    //   }, []); // empty list of dependencies ensures the hooks is only called upon rendering of the component\n\n    return(\n        //TODO: Display different component in case of a db connection error \n        <div>\n        <SearchPage/>\n        </div>\n    )\n}\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// class App extends React.Component {\n//   constructor(props) {\n//       super(props);\n//       this.state = { apiResponse: \"\" , quoteId: \"\"};\n//       this.getQuoteId = this.getQuoteId.bind(this);\n//       this.findQuote = this.findQuote.bind(this);\n//       this.setApiResponse = this.setApiResponse.bind(this);\n//   }\n\n//   async callAPI(route, options) {\n//     let quote = await fetch(`http://localhost:9000/${route}`, options);\n//     let res = await quote.json();\n//     console.log(\"res in callAPI is: \" + JSON.stringify(res));\n//     return res;\n//   }\n\n//   getQuoteId(event) {\n//     this.setState({quoteId: event.target.value});\n//   }\n\n//   setApiResponse(res) {\n//     // alert(\"res: \" + res);\n//     console.log(\"res in setAPIResponse: \" + JSON.stringify(res));\n//     this.setState({apiResponse: JSON.stringify(res.quote)});\n//   }\n\n//   async findQuote(event) {\n//     event.preventDefault();\n//     const requestOptions = {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({_id: this.state.quoteId})\n//     };\n//     let res = await this.callAPI(\"findQuote\", requestOptions);\n//     console.log(\"res in findQuote: \" + JSON.stringify(res));\n//     this.setApiResponse(res);\n//   }\n\n//   async componentDidMount() {\n//     let res = await this.callAPI(\"setUp\", {});\n//     console.log(res);\n//   }\n\n//   render() {\n//       return (\n//           <div>\n//               <SearchPage/>\n//               <input type=\"text\" value={this.state.quoteId} onChange={this.getQuoteId}></input>\n//               <button onClick={this.findQuote}>Click me</button>\n//               <p>{this.state.apiResponse}</p>\n//           </div>\n//       );\n//   }\n// }\n\n"]},"metadata":{},"sourceType":"module"}