{"ast":null,"code":"var fs = require(\"./fileSystem\").require(),\n    pth = require('path');\n\nfs.existsSync = fs.existsSync || pth.existsSync;\n\nmodule.exports = function () {\n  var crcTable = [],\n      Constants = require('./constants'),\n      Errors = require('./errors'),\n      PATH_SEPARATOR = pth.sep;\n\n  function mkdirSync(\n  /*String*/\n  path) {\n    var resolvedPath = path.split(PATH_SEPARATOR)[0];\n    path.split(PATH_SEPARATOR).forEach(function (name) {\n      if (!name || name.substr(-1, 1) === \":\") return;\n      resolvedPath += PATH_SEPARATOR + name;\n      var stat;\n\n      try {\n        stat = fs.statSync(resolvedPath);\n      } catch (e) {\n        fs.mkdirSync(resolvedPath);\n      }\n\n      if (stat && stat.isFile()) throw Errors.FILE_IN_THE_WAY.replace(\"%s\", resolvedPath);\n    });\n  }\n\n  function findSync(\n  /*String*/\n  dir,\n  /*RegExp*/\n  pattern,\n  /*Boolean*/\n  recoursive) {\n    if (typeof pattern === 'boolean') {\n      recoursive = pattern;\n      pattern = undefined;\n    }\n\n    var files = [];\n    fs.readdirSync(dir).forEach(function (file) {\n      var path = pth.join(dir, file);\n      if (fs.statSync(path).isDirectory() && recoursive) files = files.concat(findSync(path, pattern, recoursive));\n\n      if (!pattern || pattern.test(path)) {\n        files.push(pth.normalize(path) + (fs.statSync(path).isDirectory() ? PATH_SEPARATOR : \"\"));\n      }\n    });\n    return files;\n  }\n\n  function readBigUInt64LE(\n  /*Buffer*/\n  buffer,\n  /*int*/\n  index) {\n    var slice = Buffer.from(buffer.slice(index, index + 8));\n    slice.swap64();\n    return parseInt(`0x${slice.toString('hex')}`);\n  }\n\n  return {\n    makeDir: function (\n    /*String*/\n    path) {\n      mkdirSync(path);\n    },\n    crc32: function (buf) {\n      if (typeof buf === 'string') {\n        buf = Buffer.alloc(buf.length, buf);\n      }\n\n      var b = Buffer.alloc(4);\n\n      if (!crcTable.length) {\n        for (var n = 0; n < 256; n++) {\n          var c = n;\n\n          for (var k = 8; --k >= 0;) //\n          if ((c & 1) !== 0) {\n            c = 0xedb88320 ^ c >>> 1;\n          } else {\n            c = c >>> 1;\n          }\n\n          if (c < 0) {\n            b.writeInt32LE(c, 0);\n            c = b.readUInt32LE(0);\n          }\n\n          crcTable[n] = c;\n        }\n      }\n\n      var crc = 0,\n          off = 0,\n          len = buf.length,\n          c1 = ~crc;\n\n      while (--len >= 0) c1 = crcTable[(c1 ^ buf[off++]) & 0xff] ^ c1 >>> 8;\n\n      crc = ~c1;\n      b.writeInt32LE(crc & 0xffffffff, 0);\n      return b.readUInt32LE(0);\n    },\n    methodToString: function (\n    /*Number*/\n    method) {\n      switch (method) {\n        case Constants.STORED:\n          return 'STORED (' + method + ')';\n\n        case Constants.DEFLATED:\n          return 'DEFLATED (' + method + ')';\n\n        default:\n          return 'UNSUPPORTED (' + method + ')';\n      }\n    },\n    writeFileTo: function (\n    /*String*/\n    path,\n    /*Buffer*/\n    content,\n    /*Boolean*/\n    overwrite,\n    /*Number*/\n    attr) {\n      if (fs.existsSync(path)) {\n        if (!overwrite) return false; // cannot overwrite\n\n        var stat = fs.statSync(path);\n\n        if (stat.isDirectory()) {\n          return false;\n        }\n      }\n\n      var folder = pth.dirname(path);\n\n      if (!fs.existsSync(folder)) {\n        mkdirSync(folder);\n      }\n\n      var fd;\n\n      try {\n        fd = fs.openSync(path, 'w', 438); // 0666\n      } catch (e) {\n        fs.chmodSync(path, 438);\n        fd = fs.openSync(path, 'w', 438);\n      }\n\n      if (fd) {\n        try {\n          fs.writeSync(fd, content, 0, content.length, 0);\n        } catch (e) {\n          throw e;\n        } finally {\n          fs.closeSync(fd);\n        }\n      }\n\n      fs.chmodSync(path, attr || 438);\n      return true;\n    },\n    writeFileToAsync: function (\n    /*String*/\n    path,\n    /*Buffer*/\n    content,\n    /*Boolean*/\n    overwrite,\n    /*Number*/\n    attr,\n    /*Function*/\n    callback) {\n      if (typeof attr === 'function') {\n        callback = attr;\n        attr = undefined;\n      }\n\n      fs.exists(path, function (exists) {\n        if (exists && !overwrite) return callback(false);\n        fs.stat(path, function (err, stat) {\n          if (exists && stat.isDirectory()) {\n            return callback(false);\n          }\n\n          var folder = pth.dirname(path);\n          fs.exists(folder, function (exists) {\n            if (!exists) mkdirSync(folder);\n            fs.open(path, 'w', 438, function (err, fd) {\n              if (err) {\n                fs.chmod(path, 438, function () {\n                  fs.open(path, 'w', 438, function (err, fd) {\n                    fs.write(fd, content, 0, content.length, 0, function () {\n                      fs.close(fd, function () {\n                        fs.chmod(path, attr || 438, function () {\n                          callback(true);\n                        });\n                      });\n                    });\n                  });\n                });\n              } else {\n                if (fd) {\n                  fs.write(fd, content, 0, content.length, 0, function () {\n                    fs.close(fd, function () {\n                      fs.chmod(path, attr || 438, function () {\n                        callback(true);\n                      });\n                    });\n                  });\n                } else {\n                  fs.chmod(path, attr || 438, function () {\n                    callback(true);\n                  });\n                }\n              }\n            });\n          });\n        });\n      });\n    },\n    findFiles: function (\n    /*String*/\n    path) {\n      return findSync(path, true);\n    },\n    getAttributes: function (\n    /*String*/\n    path) {},\n    setAttributes: function (\n    /*String*/\n    path) {},\n    toBuffer: function (input) {\n      if (Buffer.isBuffer(input)) {\n        return input;\n      } else {\n        if (input.length === 0) {\n          return Buffer.alloc(0);\n        }\n\n        return Buffer.from(input, 'utf8');\n      }\n    },\n    readBigUInt64LE,\n    Constants: Constants,\n    Errors: Errors\n  };\n}();","map":{"version":3,"sources":["/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/node_modules/adm-zip/util/utils.js"],"names":["fs","require","pth","existsSync","module","exports","crcTable","Constants","Errors","PATH_SEPARATOR","sep","mkdirSync","path","resolvedPath","split","forEach","name","substr","stat","statSync","e","isFile","FILE_IN_THE_WAY","replace","findSync","dir","pattern","recoursive","undefined","files","readdirSync","file","join","isDirectory","concat","test","push","normalize","readBigUInt64LE","buffer","index","slice","Buffer","from","swap64","parseInt","toString","makeDir","crc32","buf","alloc","length","b","n","c","k","writeInt32LE","readUInt32LE","crc","off","len","c1","methodToString","method","STORED","DEFLATED","writeFileTo","content","overwrite","attr","folder","dirname","fd","openSync","chmodSync","writeSync","closeSync","writeFileToAsync","callback","exists","err","open","chmod","write","close","findFiles","getAttributes","setAttributes","toBuffer","input","isBuffer"],"mappings":"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","sourcesContent":["var fs = require(\"./fileSystem\").require(),\r\n    pth = require('path');\r\n\r\nfs.existsSync = fs.existsSync || pth.existsSync;\r\n\r\nmodule.exports = (function() {\r\n\r\n    var crcTable = [],\r\n        Constants = require('./constants'),\r\n        Errors = require('./errors'),\r\n\r\n        PATH_SEPARATOR = pth.sep;\r\n\r\n\r\n    function mkdirSync(/*String*/path) {\r\n        var resolvedPath = path.split(PATH_SEPARATOR)[0];\r\n        path.split(PATH_SEPARATOR).forEach(function(name) {\r\n            if (!name || name.substr(-1,1) === \":\") return;\r\n            resolvedPath += PATH_SEPARATOR + name;\r\n            var stat;\r\n            try {\r\n                stat = fs.statSync(resolvedPath);\r\n            } catch (e) {\r\n                fs.mkdirSync(resolvedPath);\r\n            }\r\n            if (stat && stat.isFile())\r\n                throw Errors.FILE_IN_THE_WAY.replace(\"%s\", resolvedPath);\r\n        });\r\n    }\r\n\r\n    function findSync(/*String*/dir, /*RegExp*/pattern, /*Boolean*/recoursive) {\r\n        if (typeof pattern === 'boolean') {\r\n            recoursive = pattern;\r\n            pattern = undefined;\r\n        }\r\n        var files = [];\r\n        fs.readdirSync(dir).forEach(function(file) {\r\n            var path = pth.join(dir, file);\r\n\r\n            if (fs.statSync(path).isDirectory() && recoursive)\r\n                files = files.concat(findSync(path, pattern, recoursive));\r\n\r\n            if (!pattern || pattern.test(path)) {\r\n                files.push(pth.normalize(path) + (fs.statSync(path).isDirectory() ? PATH_SEPARATOR : \"\"));\r\n            }\r\n\r\n        });\r\n        return files;\r\n    }\r\n\r\n    function readBigUInt64LE(/*Buffer*/buffer, /*int*/index) {\r\n        var slice = Buffer.from(buffer.slice(index, index + 8));\r\n        slice.swap64();\r\n\r\n        return parseInt(`0x${ slice.toString('hex') }`);\r\n    }\r\n\r\n    return {\r\n        makeDir : function(/*String*/path) {\r\n            mkdirSync(path);\r\n        },\r\n\r\n        crc32 : function(buf) {\r\n            if (typeof buf === 'string') {\r\n                buf = Buffer.alloc(buf.length, buf);\r\n            }\r\n            var b = Buffer.alloc(4);\r\n            if (!crcTable.length) {\r\n                for (var n = 0; n < 256; n++) {\r\n                    var c = n;\r\n                    for (var k = 8; --k >= 0;)  //\r\n                        if ((c & 1) !== 0)  { c = 0xedb88320 ^ (c >>> 1); } else { c = c >>> 1; }\r\n                    if (c < 0) {\r\n                        b.writeInt32LE(c, 0);\r\n                        c = b.readUInt32LE(0);\r\n                    }\r\n                    crcTable[n] = c;\r\n                }\r\n            }\r\n            var crc = 0, off = 0, len = buf.length, c1 = ~crc;\r\n            while(--len >= 0) c1 = crcTable[(c1 ^ buf[off++]) & 0xff] ^ (c1 >>> 8);\r\n            crc = ~c1;\r\n            b.writeInt32LE(crc & 0xffffffff, 0);\r\n            return b.readUInt32LE(0);\r\n        },\r\n\r\n        methodToString : function(/*Number*/method) {\r\n            switch (method) {\r\n                case Constants.STORED:\r\n                    return 'STORED (' + method + ')';\r\n                case Constants.DEFLATED:\r\n                    return 'DEFLATED (' + method + ')';\r\n                default:\r\n                    return 'UNSUPPORTED (' + method + ')';\r\n            }\r\n\r\n        },\r\n\r\n        writeFileTo : function(/*String*/path, /*Buffer*/content, /*Boolean*/overwrite, /*Number*/attr) {\r\n            if (fs.existsSync(path)) {\r\n                if (!overwrite)\r\n                    return false; // cannot overwrite\r\n\r\n                var stat = fs.statSync(path);\r\n                if (stat.isDirectory()) {\r\n                    return false;\r\n                }\r\n            }\r\n            var folder = pth.dirname(path);\r\n            if (!fs.existsSync(folder)) {\r\n                mkdirSync(folder);\r\n            }\r\n\r\n            var fd;\r\n            try {\r\n                fd = fs.openSync(path, 'w', 438); // 0666\r\n            } catch(e) {\r\n                fs.chmodSync(path, 438);\r\n                fd = fs.openSync(path, 'w', 438);\r\n            }\r\n            if (fd) {\r\n                try {\r\n                    fs.writeSync(fd, content, 0, content.length, 0);\r\n                }\r\n                catch (e){\r\n                    throw e;\r\n                }\r\n                finally {\r\n                    fs.closeSync(fd);\r\n                }\r\n            }\r\n            fs.chmodSync(path, attr || 438);\r\n            return true;\r\n        },\r\n\r\n        writeFileToAsync : function(/*String*/path, /*Buffer*/content, /*Boolean*/overwrite, /*Number*/attr, /*Function*/callback) {\r\n            if(typeof attr === 'function') {\r\n                callback = attr;\r\n                attr = undefined;\r\n            }\r\n\r\n            fs.exists(path, function(exists) {\r\n                if(exists && !overwrite)\r\n                    return callback(false);\r\n\r\n                fs.stat(path, function(err, stat) {\r\n                    if(exists &&stat.isDirectory()) {\r\n                        return callback(false);\r\n                    }\r\n\r\n                    var folder = pth.dirname(path);\r\n                    fs.exists(folder, function(exists) {\r\n                        if(!exists)\r\n                            mkdirSync(folder);\r\n\r\n                        fs.open(path, 'w', 438, function(err, fd) {\r\n                            if(err) {\r\n                                fs.chmod(path, 438, function() {\r\n                                    fs.open(path, 'w', 438, function(err, fd) {\r\n                                        fs.write(fd, content, 0, content.length, 0, function() {\r\n                                            fs.close(fd, function() {\r\n                                                fs.chmod(path, attr || 438, function() {\r\n                                                    callback(true);\r\n                                                })\r\n                                            });\r\n                                        });\r\n                                    });\r\n                                })\r\n                            } else {\r\n                                if(fd) {\r\n                                    fs.write(fd, content, 0, content.length, 0, function() {\r\n                                        fs.close(fd, function() {\r\n                                            fs.chmod(path, attr || 438, function() {\r\n                                                callback(true);\r\n                                            })\r\n                                        });\r\n                                    });\r\n                                } else {\r\n                                    fs.chmod(path, attr || 438, function() {\r\n                                        callback(true);\r\n                                    })\r\n                                }\r\n                            }\r\n                        });\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        findFiles : function(/*String*/path) {\r\n            return findSync(path, true);\r\n        },\r\n\r\n        getAttributes : function(/*String*/path) {\r\n\r\n        },\r\n\r\n        setAttributes : function(/*String*/path) {\r\n\r\n        },\r\n\r\n        toBuffer : function(input) {\r\n            if (Buffer.isBuffer(input)) {\r\n                return input;\r\n            } else {\r\n                if (input.length === 0) {\r\n                    return Buffer.alloc(0)\r\n                }\r\n                return Buffer.from(input, 'utf8');\r\n            }\r\n        },\r\n\r\n        readBigUInt64LE,\r\n\r\n        Constants : Constants,\r\n        Errors : Errors\r\n    }\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}