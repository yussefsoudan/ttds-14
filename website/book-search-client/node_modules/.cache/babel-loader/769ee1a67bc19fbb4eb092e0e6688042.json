{"ast":null,"code":"var path = require('path');\n\nvar Promise = require('any-promise');\n\nvar bindings = require('../build/Release/spellchecker.node');\n\nvar Spellchecker = bindings.Spellchecker;\nvar checkSpellingAsyncCb = Spellchecker.prototype.checkSpellingAsync;\n\nSpellchecker.prototype.checkSpellingAsync = function (corpus) {\n  return new Promise(function (resolve, reject) {\n    checkSpellingAsyncCb.call(this, corpus, function (err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  }.bind(this));\n};\n\nvar defaultSpellcheck = null;\n\nvar ensureDefaultSpellCheck = function () {\n  if (defaultSpellcheck) {\n    return;\n  }\n\n  var lang = process.env.LANG;\n  lang = lang ? lang.split('.')[0] : 'en_US';\n  defaultSpellcheck = new Spellchecker();\n  setDictionary(lang, getDictionaryPath());\n};\n\nvar setDictionary = function (lang, dictPath) {\n  ensureDefaultSpellCheck();\n  return defaultSpellcheck.setDictionary(lang, dictPath);\n};\n\nvar isMisspelled = function () {\n  ensureDefaultSpellCheck();\n  return defaultSpellcheck.isMisspelled.apply(defaultSpellcheck, arguments);\n};\n\nvar checkSpelling = function () {\n  ensureDefaultSpellCheck();\n  return defaultSpellcheck.checkSpelling.apply(defaultSpellcheck, arguments);\n};\n\nvar checkSpellingAsync = function (corpus) {\n  ensureDefaultSpellCheck();\n  return defaultSpellcheck.checkSpellingAsync.apply(defaultSpellcheck, arguments);\n};\n\nvar add = function () {\n  ensureDefaultSpellCheck();\n  defaultSpellcheck.add.apply(defaultSpellcheck, arguments);\n};\n\nvar remove = function () {\n  ensureDefaultSpellCheck();\n  defaultSpellcheck.remove.apply(defaultSpellcheck, arguments);\n};\n\nvar getCorrectionsForMisspelling = function () {\n  ensureDefaultSpellCheck();\n  return defaultSpellcheck.getCorrectionsForMisspelling.apply(defaultSpellcheck, arguments);\n};\n\nvar getAvailableDictionaries = function () {\n  ensureDefaultSpellCheck();\n  return defaultSpellcheck.getAvailableDictionaries.apply(defaultSpellcheck, arguments);\n};\n\nvar getDictionaryPath = function () {\n  var dict = path.join(__dirname, '..', 'vendor', 'hunspell_dictionaries');\n\n  try {\n    // HACK: Special case being in an asar archive\n    var unpacked = dict.replace('.asar' + path.sep, '.asar.unpacked' + path.sep);\n\n    if (require('fs').statSync(unpacked)) {\n      dict = unpacked;\n    }\n  } catch (error) {// When the dictionary isn't contained within an .asar, return the original path.\n  }\n\n  return dict;\n};\n\nmodule.exports = {\n  setDictionary: setDictionary,\n  add: add,\n  remove: remove,\n  isMisspelled: isMisspelled,\n  checkSpelling: checkSpelling,\n  checkSpellingAsync: checkSpellingAsync,\n  getAvailableDictionaries: getAvailableDictionaries,\n  getCorrectionsForMisspelling: getCorrectionsForMisspelling,\n  getDictionaryPath: getDictionaryPath,\n  Spellchecker: Spellchecker,\n  USE_SYSTEM_DEFAULTS: 0,\n  ALWAYS_USE_SYSTEM: 1,\n  ALWAYS_USE_HUNSPELL: 2\n};","map":{"version":3,"sources":["/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/node_modules/spellchecker/lib/spellchecker.js"],"names":["path","require","Promise","bindings","Spellchecker","checkSpellingAsyncCb","prototype","checkSpellingAsync","corpus","resolve","reject","call","err","result","bind","defaultSpellcheck","ensureDefaultSpellCheck","lang","process","env","LANG","split","setDictionary","getDictionaryPath","dictPath","isMisspelled","apply","arguments","checkSpelling","add","remove","getCorrectionsForMisspelling","getAvailableDictionaries","dict","join","__dirname","unpacked","replace","sep","statSync","error","module","exports","USE_SYSTEM_DEFAULTS","ALWAYS_USE_SYSTEM","ALWAYS_USE_HUNSPELL"],"mappings":"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","sourcesContent":["var path = require('path');\nvar Promise = require('any-promise');\nvar bindings = require('../build/Release/spellchecker.node');\n\nvar Spellchecker = bindings.Spellchecker;\n\nvar checkSpellingAsyncCb = Spellchecker.prototype.checkSpellingAsync\n\nSpellchecker.prototype.checkSpellingAsync = function (corpus) {\n  return new Promise(function (resolve, reject) {\n    checkSpellingAsyncCb.call(this, corpus, function (err, result) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  }.bind(this));\n};\n\nvar defaultSpellcheck = null;\n\nvar ensureDefaultSpellCheck = function() {\n  if (defaultSpellcheck) {\n    return;\n  }\n\n  var lang = process.env.LANG;\n  lang = lang ? lang.split('.')[0] : 'en_US';\n  defaultSpellcheck = new Spellchecker();\n\n  setDictionary(lang, getDictionaryPath());\n};\n\nvar setDictionary = function(lang, dictPath) {\n  ensureDefaultSpellCheck();\n  return defaultSpellcheck.setDictionary(lang, dictPath);\n};\n\nvar isMisspelled = function() {\n  ensureDefaultSpellCheck();\n\n  return defaultSpellcheck.isMisspelled.apply(defaultSpellcheck, arguments);\n};\n\nvar checkSpelling = function() {\n  ensureDefaultSpellCheck();\n\n  return defaultSpellcheck.checkSpelling.apply(defaultSpellcheck, arguments);\n};\n\nvar checkSpellingAsync = function(corpus) {\n  ensureDefaultSpellCheck();\n\n  return defaultSpellcheck.checkSpellingAsync.apply(defaultSpellcheck, arguments);\n};\n\nvar add = function() {\n  ensureDefaultSpellCheck();\n\n  defaultSpellcheck.add.apply(defaultSpellcheck, arguments);\n};\n\nvar remove = function() {\n  ensureDefaultSpellCheck();\n\n  defaultSpellcheck.remove.apply(defaultSpellcheck, arguments);\n};\n\nvar getCorrectionsForMisspelling = function() {\n  ensureDefaultSpellCheck();\n\n  return defaultSpellcheck.getCorrectionsForMisspelling.apply(defaultSpellcheck, arguments);\n};\n\nvar getAvailableDictionaries = function() {\n  ensureDefaultSpellCheck();\n\n  return defaultSpellcheck.getAvailableDictionaries.apply(defaultSpellcheck, arguments);\n};\n\nvar getDictionaryPath = function() {\n  var dict = path.join(__dirname, '..', 'vendor', 'hunspell_dictionaries');\n  try {\n    // HACK: Special case being in an asar archive\n    var unpacked = dict.replace('.asar' + path.sep, '.asar.unpacked' + path.sep);\n    if (require('fs').statSync(unpacked)) {\n      dict = unpacked;\n    }\n  } catch (error) {\n    // When the dictionary isn't contained within an .asar, return the original path.\n  }\n  return dict;\n}\n\nmodule.exports = {\n  setDictionary: setDictionary,\n  add: add,\n  remove: remove,\n  isMisspelled: isMisspelled,\n  checkSpelling: checkSpelling,\n  checkSpellingAsync: checkSpellingAsync,\n  getAvailableDictionaries: getAvailableDictionaries,\n  getCorrectionsForMisspelling: getCorrectionsForMisspelling,\n  getDictionaryPath: getDictionaryPath,\n  Spellchecker: Spellchecker,\n  USE_SYSTEM_DEFAULTS: 0,\n  ALWAYS_USE_SYSTEM: 1,\n  ALWAYS_USE_HUNSPELL: 2,\n};\n"]},"metadata":{},"sourceType":"script"}