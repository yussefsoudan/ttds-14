{"ast":null,"code":"/*\r\n * Copyright (c) 2016 Jos√© F. Maldonado\r\n * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. \r\n * If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\r\n */\n// Load dependencies.\nconst BinarySearch = require('binarysearch');\n\nconst Levenshtien = require('damerau-levenshtein'); // Use this object for consider accents and special characters when comparing UTF-8 strings.\n\n\nvar Collator = new Intl.Collator(undefined, {\n  'sensitivity': 'accent'\n}); // The search for suggestions is going to be limited to words that are next to the position, in the word list, in which the word would be inserted.\n\nvar SuggestRadius = 1000;\n/**\r\n * Creates an instance of Dictionary.\r\n *\r\n * @constructor\r\n * @this {Dictionary}\r\n * @param {string[]} wordlist A sorted array of strings.\r\n */\n\nfunction Dictionary(wordlist) {\n  this.wordlist = [];\n  this.setWordlist(wordlist);\n  this.clearRegexs();\n}\n/**\r\n * Returns the number of words in the dictionary.\r\n *\r\n * @return {number} The number of words in the dictionary.\r\n */\n\n\nDictionary.prototype.getLength = function () {\n  return this.wordlist != null ? this.wordlist.length : 0;\n};\n/**\r\n * Set the list of words of the dictionary. a new Circle from a diameter.\r\n *\r\n * @param {string[]} wordlist A sorted array of strings.\r\n */\n\n\nDictionary.prototype.setWordlist = function (wordlist) {\n  if (wordlist != null && Array.isArray(wordlist)) this.wordlist = wordlist;\n};\n/**\r\n * Verify if a word is in the dictionary.\r\n *\r\n * @param {string} word A string.\r\n * @return {bool} 'true' if the word is in the dictionary, 'false' otherwise.\r\n */\n\n\nDictionary.prototype.spellCheck = function (word) {\n  // Verify if the word satifies one of the regular expressions.\n  for (var i = 0; i < this.regexs.length; i++) {\n    if (this.regexs[i].test(word)) return true;\n  } // Since the list is sorted, is more fast to do a binary search than 'this.wordlist.indexOf(word)'.\n\n\n  var res = BinarySearch(this.wordlist, // Haystack\n  word.toLowerCase(), // Needle\n  Collator.compare // Comparison method\n  );\n  return res >= 0;\n};\n/**\r\n * Verify if a word is misspelled.\r\n *\r\n * @param {string} word A string.\r\n * @return {bool} 'true' if the word is misspelled, 'false' otherwise.\r\n */\n\n\nDictionary.prototype.isMisspelled = function (word) {\n  return !this.spellCheck(word);\n};\n/**\r\n * Get a list of suggestions for a misspelled word.\r\n *\r\n * @param {string} word A string.\r\n * @param {number} limit An integer indicating the maximum number of suggestions (by default 5).\r\n * @param {number} maxDistance An integer indicating the maximum edit distance between the word and the suggestions (by default 3).\r\n * @return {string[]} An array of strings with the suggestions.\r\n */\n\n\nDictionary.prototype.getSuggestions = function (word, limit, maxDistance) {\n  var suggestions = [];\n\n  if (word != null && word.length > 0) {\n    // Validate parameters.\n    word = word.toLowerCase();\n    if (limit == null || isNaN(limit) || limit <= 0) limit = 5;\n    if (maxDistance == null || isNaN(maxDistance) || maxDistance <= 0) maxDistance = 2;\n    if (maxDistance >= word.length) maxDistance = word.length - 1; // Search index of closest item.\n\n    var closest = BinarySearch.closest(this.wordlist, word, Collator.compare); // Initialize variables for store results.\n\n    var res = [];\n\n    for (var i = 0; i <= maxDistance; i++) res.push([]); // Search suggestions around the position in which the word would be inserted.\n\n\n    var k, dist;\n\n    for (var i = 0; i < SuggestRadius; i++) {\n      // The index 'k' is going to be 0, 1, -1, 2, -2... \n      k = closest + (i % 2 != 0 ? (i + 1) / 2 : -i / 2);\n\n      if (k >= 0 && k < this.wordlist.length) {\n        dist = Levenshtien(word, this.wordlist[k].toLowerCase()).steps;\n        if (dist <= maxDistance) res[dist].push(this.wordlist[k]);\n      }\n    } // Prepare result.\n\n\n    for (var d = 0; d <= maxDistance && suggestions.length < limit; d++) {\n      var remaining = limit - suggestions.length;\n      suggestions = suggestions.concat(res[d].length > remaining ? res[d].slice(0, remaining) : res[d]);\n    }\n  }\n\n  return suggestions;\n};\n/**\r\n * Verify if a word is misspelled and get a list of suggestions.\r\n *\r\n * @param {string} word A string.\r\n * @param {number} limit An integer indicating the maximum number of suggestions (by default 5).\r\n * @param {number} maxDistance An integer indicating the maximum edit distance between the word and the suggestions (by default 3).\r\n * @return {Object} An object with the properties 'misspelled' (a boolean) and 'suggestions' (an array of strings).\r\n */\n\n\nDictionary.prototype.checkAndSuggest = function (word, limit, maxDistance) {\n  // Get suggestions.\n  var suggestions = this.getSuggestions(word, limit + 1, maxDistance); // Prepare response.\n\n  var res = {\n    'misspelled': true,\n    'suggestions': []\n  };\n  res.misspelled = suggestions.length == 0 || suggestions[0].toLowerCase() != word.toLowerCase();\n  res.suggestions = suggestions;\n  if (res.misspelled && suggestions.length > limit) res.suggestions = suggestions.slice(0, limit);\n  if (!res.misspelled) res.suggestions = suggestions.slice(1, suggestions.length); // Verify if the word satifies one of the regular expressions.\n\n  if (res.misspelled) {\n    for (var i = 0; i < this.regexs.length; i++) {\n      if (this.regexs[i].test(word)) res.misspelled = false;\n    }\n  }\n\n  return res;\n};\n/**\r\n * Adds a regular expression that will be used to verify if a word is valid even though is not on the dictionary.\r\n * Useful indicate that numbers, URLs and emails should not be marked as misspelled words.\r\n *\r\n * @param {RegEx} regexp A regular expression.\r\n */\n\n\nDictionary.prototype.addRegex = function (regex) {\n  this.regexs.push(regex);\n};\n/**\r\n * Clear the list of regultar expressions used to verify if a word is valid even though is not on the dictionary.\r\n */\n\n\nDictionary.prototype.clearRegexs = function () {\n  this.regexs = [];\n}; // Export class.\n\n\nmodule.exports = Dictionary;","map":{"version":3,"sources":["/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/node_modules/simple-spellchecker/dictionary.js"],"names":["BinarySearch","require","Levenshtien","Collator","Intl","undefined","SuggestRadius","Dictionary","wordlist","setWordlist","clearRegexs","prototype","getLength","length","Array","isArray","spellCheck","word","i","regexs","test","res","toLowerCase","compare","isMisspelled","getSuggestions","limit","maxDistance","suggestions","isNaN","closest","push","k","dist","steps","d","remaining","concat","slice","checkAndSuggest","misspelled","addRegex","regex","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2016 Jos√© F. Maldonado\r\n * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. \r\n * If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\r\n */\r\n\r\n// Load dependencies.\r\nconst BinarySearch = require('binarysearch');\r\nconst Levenshtien  = require('damerau-levenshtein');\r\n\r\n// Use this object for consider accents and special characters when comparing UTF-8 strings.\r\nvar Collator = new Intl.Collator(undefined, {'sensitivity': 'accent'});\r\n \r\n// The search for suggestions is going to be limited to words that are next to the position, in the word list, in which the word would be inserted.\r\nvar SuggestRadius = 1000;\r\n\r\n/**\r\n * Creates an instance of Dictionary.\r\n *\r\n * @constructor\r\n * @this {Dictionary}\r\n * @param {string[]} wordlist A sorted array of strings.\r\n */\r\nfunction Dictionary(wordlist) {\r\n    this.wordlist = [];\r\n    this.setWordlist(wordlist);\r\n    this.clearRegexs();\r\n}\r\n\r\n/**\r\n * Returns the number of words in the dictionary.\r\n *\r\n * @return {number} The number of words in the dictionary.\r\n */\r\nDictionary.prototype.getLength = function() {\r\n    return this.wordlist != null? this.wordlist.length : 0;\r\n};\r\n\r\n/**\r\n * Set the list of words of the dictionary. a new Circle from a diameter.\r\n *\r\n * @param {string[]} wordlist A sorted array of strings.\r\n */\r\nDictionary.prototype.setWordlist = function(wordlist) {\r\n    if(wordlist != null && Array.isArray(wordlist)) this.wordlist = wordlist;\r\n};\r\n\r\n/**\r\n * Verify if a word is in the dictionary.\r\n *\r\n * @param {string} word A string.\r\n * @return {bool} 'true' if the word is in the dictionary, 'false' otherwise.\r\n */\r\nDictionary.prototype.spellCheck = function(word) {\r\n    // Verify if the word satifies one of the regular expressions.\r\n    for(var i=0; i<this.regexs.length; i++) {\r\n        if(this.regexs[i].test(word)) return true;\r\n    }\r\n  \r\n    // Since the list is sorted, is more fast to do a binary search than 'this.wordlist.indexOf(word)'.\r\n    var res = BinarySearch(\r\n        this.wordlist, // Haystack\r\n        word.toLowerCase(), // Needle\r\n        Collator.compare // Comparison method\r\n    );\r\n    return res >= 0;\r\n};\r\n\r\n/**\r\n * Verify if a word is misspelled.\r\n *\r\n * @param {string} word A string.\r\n * @return {bool} 'true' if the word is misspelled, 'false' otherwise.\r\n */\r\nDictionary.prototype.isMisspelled = function(word) {\r\n    return ! this.spellCheck(word);\r\n};\r\n\r\n/**\r\n * Get a list of suggestions for a misspelled word.\r\n *\r\n * @param {string} word A string.\r\n * @param {number} limit An integer indicating the maximum number of suggestions (by default 5).\r\n * @param {number} maxDistance An integer indicating the maximum edit distance between the word and the suggestions (by default 3).\r\n * @return {string[]} An array of strings with the suggestions.\r\n */\r\nDictionary.prototype.getSuggestions = function(word, limit, maxDistance) {\r\n    var suggestions = [];\r\n    if(word != null && word.length > 0) {\r\n        // Validate parameters.\r\n        word = word.toLowerCase();\r\n        if(limit == null || isNaN(limit) || limit <= 0) limit = 5;\r\n        if(maxDistance == null || isNaN(maxDistance) || maxDistance <= 0) maxDistance = 2;\r\n        if(maxDistance >= word.length) maxDistance = word.length - 1;\r\n      \r\n        // Search index of closest item.\r\n        var closest = BinarySearch.closest(this.wordlist, word, Collator.compare);\r\n        \r\n        // Initialize variables for store results.\r\n        var res = [];\r\n        for(var i=0; i<=maxDistance; i++) res.push([]);\r\n        \r\n        // Search suggestions around the position in which the word would be inserted.\r\n        var k, dist;\r\n        for(var i=0; i<SuggestRadius; i++) {\r\n            // The index 'k' is going to be 0, 1, -1, 2, -2... \r\n            k = closest + (i%2 != 0? ((i+1)/2) : (-i/2) );\r\n            if(k >=0 && k < this.wordlist.length) {\r\n                dist = Levenshtien(word, this.wordlist[k].toLowerCase()).steps; \r\n                if(dist <= maxDistance) res[dist].push(this.wordlist[k]);\r\n            }\r\n        }\r\n        \r\n        // Prepare result.\r\n        for(var d=0; d<=maxDistance && suggestions.length < limit; d++) {\r\n            var remaining = limit - suggestions.length;\r\n            suggestions = suggestions.concat( (res[d].length > remaining)? res[d].slice(0, remaining) : res[d] );\r\n        }\r\n    }\r\n    return suggestions;\r\n}\r\n\r\n/**\r\n * Verify if a word is misspelled and get a list of suggestions.\r\n *\r\n * @param {string} word A string.\r\n * @param {number} limit An integer indicating the maximum number of suggestions (by default 5).\r\n * @param {number} maxDistance An integer indicating the maximum edit distance between the word and the suggestions (by default 3).\r\n * @return {Object} An object with the properties 'misspelled' (a boolean) and 'suggestions' (an array of strings).\r\n */\r\nDictionary.prototype.checkAndSuggest = function(word, limit, maxDistance) {\r\n    // Get suggestions.\r\n    var suggestions = this.getSuggestions(word, limit+1, maxDistance);\r\n    \r\n    // Prepare response.\r\n    var res = {'misspelled': true, 'suggestions': []};\r\n    res.misspelled = suggestions.length == 0 || suggestions[0].toLowerCase() != word.toLowerCase();\r\n    res.suggestions = suggestions;\r\n    if(res.misspelled && (suggestions.length > limit)) res.suggestions = suggestions.slice(0, limit);\r\n    if(!res.misspelled) res.suggestions = suggestions.slice(1, suggestions.length);\r\n\r\n    // Verify if the word satifies one of the regular expressions.\r\n    if(res.misspelled) {\r\n        for(var i=0; i<this.regexs.length; i++) {\r\n            if(this.regexs[i].test(word)) res.misspelled = false;\r\n        }\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\n/**\r\n * Adds a regular expression that will be used to verify if a word is valid even though is not on the dictionary.\r\n * Useful indicate that numbers, URLs and emails should not be marked as misspelled words.\r\n *\r\n * @param {RegEx} regexp A regular expression.\r\n */\r\nDictionary.prototype.addRegex = function(regex) {\r\n    this.regexs.push(regex);\r\n};\r\n\r\n/**\r\n * Clear the list of regultar expressions used to verify if a word is valid even though is not on the dictionary.\r\n */\r\nDictionary.prototype.clearRegexs = function() {\r\n    this.regexs = [];\r\n};\r\n\r\n// Export class.\r\nmodule.exports = Dictionary;\r\n"]},"metadata":{},"sourceType":"script"}