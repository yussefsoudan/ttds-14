{"ast":null,"code":"var _jsxFileName = \"/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/src/views/ResultPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport BookCard from \"../components/BookCard.js\";\nimport Pagination from '@material-ui/lab/Pagination'; //  props will be a list of book objects\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResultPage({\n  results,\n  searchTerms\n}) {\n  _s();\n\n  const [state, setState] = useState({\n    data: [],\n    searchTerms: [],\n    offset: 1,\n    perPageResults: 10\n  });\n  console.log(\"Result page rendered\");\n  useEffect(() => {\n    const onRender = async () => {\n      console.log(\"Use effect hook\");\n      setState({ ...state,\n        data: results,\n        searchTerms: searchTerms\n      });\n    };\n\n    onRender();\n  }, []);\n\n  const handlePaginationClick = offset => {\n    setState({ ...state,\n      offset: offset\n    });\n  }; // Calculate how many pagination page we will have \n\n\n  var length = Object.keys(state.data).length;\n  var count;\n  if (length % Number(state.perPageResults) == 0) count = Math.floor(length / Number(state.perPageResults));else count = Math.floor(length / Number(state.perPageResults)) + 1;\n  console.log(\"Page count\", count);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    className: \"book-container\",\n    spacing: 6,\n    justify: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: \"book-card-result\",\n      xs: 8,\n      children: [length > state.perPageResults && /*#__PURE__*/_jsxDEV(Pagination, {\n        count: count,\n        page: state.offset,\n        onChange: (e, offset) => handlePaginationClick(offset)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }, this), state.data.slice((state.offset - 1) * state.perPageResults, (state.offset - 1) * state.perPageResults + Number(state.perPageResults)).filter(book => {\n        return book.title != null;\n      }).map((book, idx) => /*#__PURE__*/_jsxDEV(BookCard, {\n        item: true,\n        resultObj: (book, state.data['searchTerms'])\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }, this)), length > state.perPageResults && /*#__PURE__*/_jsxDEV(Pagination, {\n        count: count,\n        page: state.offset,\n        onChange: (e, offset) => handlePaginationClick(offset)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ResultPage, \"RIGq4rCKZfiyTSFY4vD/rDQ2HaA=\");\n\n_c = ResultPage;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultPage\");","map":{"version":3,"sources":["/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/src/views/ResultPage.js"],"names":["React","useState","useEffect","Grid","BookCard","Pagination","ResultPage","results","searchTerms","state","setState","data","offset","perPageResults","console","log","onRender","handlePaginationClick","length","Object","keys","count","Number","Math","floor","e","slice","filter","book","title","map","idx"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,UAAP,MAAuB,6BAAvB,C,CAEA;;;AACA,eAAe,SAASC,UAAT,CAAoB;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAApB,EAA4C;AAAA;;AAErD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC;AAC/BU,IAAAA,IAAI,EAAG,EADwB;AAE/BH,IAAAA,WAAW,EAAG,EAFiB;AAG/BI,IAAAA,MAAM,EAAG,CAHsB;AAI/BC,IAAAA,cAAc,EAAE;AAJe,GAAD,CAAlC;AAOEC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAGAb,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMc,QAAQ,GAAG,YAAY;AAC3BF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAL,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAUE,QAAAA,IAAI,EAACJ,OAAf;AAAwBC,QAAAA,WAAW,EAAGA;AAAtC,OAAD,CAAR;AACC,KAHH;;AAIAQ,IAAAA,QAAQ;AACT,GAPQ,EAOP,EAPO,CAAT;;AAUA,QAAMC,qBAAqB,GAAIL,MAAD,IAAY;AACxCF,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAUG,MAAAA,MAAM,EAACA;AAAjB,KAAD,CAAR;AACD,GAFD,CAtBmD,CA0BnD;;;AACA,MAAIM,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYX,KAAK,CAACE,IAAlB,EAAwBO,MAArC;AACA,MAAIG,KAAJ;AACA,MAAIH,MAAM,GAAGI,MAAM,CAACb,KAAK,CAACI,cAAP,CAAf,IAAyC,CAA7C,EACEQ,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWN,MAAM,GAACI,MAAM,CAACb,KAAK,CAACI,cAAP,CAAxB,CAAR,CADF,KAGEQ,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWN,MAAM,GAACI,MAAM,CAACb,KAAK,CAACI,cAAP,CAAxB,IAAkD,CAA1D;AAEFC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBM,KAAzB;AAGA,sBACA,QAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AACA,IAAA,SAAS,EAAC,gBADV;AAEA,IAAA,OAAO,EAAE,CAFT;AAGC,IAAA,OAAO,EAAC,QAHT;AAIC,IAAA,UAAU,EAAC,QAJZ;AAAA,2BAME,QAAC,IAAD;AACE,MAAA,IAAI,MADN;AAEE,MAAA,SAAS,EAAC,kBAFZ;AAGE,MAAA,EAAE,EAAE,CAHN;AAAA,iBAMGH,MAAM,GAAGT,KAAK,CAACI,cAAf,iBACC,QAAC,UAAD;AACA,QAAA,KAAK,EAAEQ,KADP;AAEA,QAAA,IAAI,EAAEZ,KAAK,CAACG,MAFZ;AAGA,QAAA,QAAQ,EAAE,CAACa,CAAD,EAAIb,MAAJ,KAAeK,qBAAqB,CAACL,MAAD;AAH9C;AAAA;AAAA;AAAA;AAAA,cAPJ,EAaGH,KAAK,CAACE,IAAN,CAAWe,KAAX,CACA,CAACjB,KAAK,CAACG,MAAN,GAAc,CAAf,IAAmBH,KAAK,CAACI,cADzB,EAEC,CAACJ,KAAK,CAACG,MAAN,GAAa,CAAd,IAAiBH,KAAK,CAACI,cAAvB,GAAwCS,MAAM,CAACb,KAAK,CAACI,cAAP,CAF/C,EAEuEc,MAFvE,CAE+EC,IAAD,IAAU;AACnF,eAAOA,IAAI,CAACC,KAAL,IAAc,IAArB;AACH,OAJF,EAIIC,GAJJ,CAIQ,CAACF,IAAD,EAAMG,GAAN,kBACH,QAAC,QAAD;AAAW,QAAA,IAAI,MAAf;AAA0B,QAAA,SAAS,GAAEH,IAAI,EAAEnB,KAAK,CAACE,IAAN,CAAW,aAAX,CAAR;AAAnC,SAAqBoB,GAArB;AAAA;AAAA;AAAA;AAAA,cALL,CAbH,EAqBGb,MAAM,GAAET,KAAK,CAACI,cAAd,iBACA,QAAC,UAAD;AACA,QAAA,KAAK,EAAEQ,KADP;AAEA,QAAA,IAAI,EAAEZ,KAAK,CAACG,MAFZ;AAGA,QAAA,QAAQ,EAAE,CAACa,CAAD,EAAIb,MAAJ,KAAeK,qBAAqB,CAACL,MAAD;AAH9C;AAAA;AAAA;AAAA;AAAA,cAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADA;AAuCP;;GA5EuBN,U;;KAAAA,U;AA4EvB","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport BookCard from \"../components/BookCard.js\"\nimport Pagination from '@material-ui/lab/Pagination';\n\n//  props will be a list of book objects\nexport default function ResultPage({results, searchTerms}) {\n\n      const [state, setState] = useState({\n          data : [],\n          searchTerms : [],\n          offset : 1,\n          perPageResults: 10,\n        });\n\n        console.log(\"Result page rendered\")\n\n        \n        useEffect(() => {\n\n          const onRender = async () => {\n            console.log(\"Use effect hook\")\n            setState({...state,data:results, searchTerms : searchTerms})          \n            }\n          onRender()\n        },[]);\n\n\n        const handlePaginationClick = (offset) => {\n          setState({...state,offset:offset})\n        }\n\n        // Calculate how many pagination page we will have \n        var length = Object.keys(state.data).length;\n        var count;\n        if (length % Number(state.perPageResults) == 0)\n          count = Math.floor(length/Number(state.perPageResults)) \n        else\n          count = Math.floor(length/Number(state.perPageResults)) + 1\n\n        console.log(\"Page count\",count)\n\n\n        return (\n        <Grid container \n        className=\"book-container\" \n        spacing={6}\n         justify=\"center\"   \n         alignItems=\"center\" \n         >\n          <Grid \n            item \n            className=\"book-card-result\"\n            xs={8}\n          >\n\n            {length > state.perPageResults &&\n              <Pagination \n              count={count} \n              page={state.offset} \n              onChange={(e, offset) => handlePaginationClick(offset)} />\n            }\n\n            {state.data.slice(\n             (state.offset -1 )*state.perPageResults, \n              (state.offset-1)*state.perPageResults + Number(state.perPageResults)).filter((book) => {\n                  return book.title != null;\n              }).map((book,idx) =>\n                  <BookCard  item key={idx} resultObj={book, state.data['searchTerms']} />\n              )}\n\n            {length> state.perPageResults &&\n             <Pagination \n             count={count} \n             page={state.offset} \n             onChange={(e, offset) => handlePaginationClick(offset)} />\n            }\n\n          </Grid>\n        </Grid> \n        \n        )\n};\n\n\n"]},"metadata":{},"sourceType":"module"}