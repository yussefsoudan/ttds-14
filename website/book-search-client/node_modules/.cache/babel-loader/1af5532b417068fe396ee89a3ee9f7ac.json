{"ast":null,"code":"var _jsxFileName = \"/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport SearchPage from \"./views/SearchPage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport findQuote from \"./api/findQuote.js\";\nimport setUp from \"./api/setUp.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState({\n    connectDB: {\n      isLoading: false,\n      error: \"\"\n    }\n  }); // useEffect(() => {\n  //     const setUpRequest = async () => {\n  //       setState({ ...state, connectDB: { ...state.connectDB, isLoading: true } });\n  //       await setUp()\n  //         .then(response => {\n  //           console.log(response);\n  //           setState({\n  //             ...state,\n  //             connectDB: {\n  //               isLoading: false,\n  //             }\n  //           });\n  //         })\n  //         .catch(errorResponse => {\n  //           setState({\n  //             ...state,\n  //             connectDB: { isLoading: false, error: errorResponse }\n  //           });\n  //         });\n  //     };\n  //     setUpRequest();\n  //   }, []); // empty list of dependencies ensures the hooks is only called upon rendering of the component\n\n  return (\n    /*#__PURE__*/\n    //TODO: Display different component in case of a db connection error \n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SearchPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(App, \"6O78oNxvI5EmUs+EcLXttYzlkWw=\");\n\n_c = App;\nexport default App; // class App extends React.Component {\n//   constructor(props) {\n//       super(props);\n//       this.state = { apiResponse: \"\" , quoteId: \"\"};\n//       this.getQuoteId = this.getQuoteId.bind(this);\n//       this.findQuote = this.findQuote.bind(this);\n//       this.setApiResponse = this.setApiResponse.bind(this);\n//   }\n//   async callAPI(route, options) {\n//     let quote = await fetch(`http://localhost:9000/${route}`, options);\n//     let res = await quote.json();\n//     console.log(\"res in callAPI is: \" + JSON.stringify(res));\n//     return res;\n//   }\n//   getQuoteId(event) {\n//     this.setState({quoteId: event.target.value});\n//   }\n//   setApiResponse(res) {\n//     // alert(\"res: \" + res);\n//     console.log(\"res in setAPIResponse: \" + JSON.stringify(res));\n//     this.setState({apiResponse: JSON.stringify(res.quote)});\n//   }\n//   async findQuote(event) {\n//     event.preventDefault();\n//     const requestOptions = {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({_id: this.state.quoteId})\n//     };\n//     let res = await this.callAPI(\"findQuote\", requestOptions);\n//     console.log(\"res in findQuote: \" + JSON.stringify(res));\n//     this.setApiResponse(res);\n//   }\n//   async componentDidMount() {\n//     let res = await this.callAPI(\"setUp\", {});\n//     console.log(res);\n//   }\n//   render() {\n//       return (\n//           <div>\n//               <SearchPage/>\n//               <input type=\"text\" value={this.state.quoteId} onChange={this.getQuoteId}></input>\n//               <button onClick={this.findQuote}>Click me</button>\n//               <p>{this.state.apiResponse}</p>\n//           </div>\n//       );\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yussefsoudan/Studies/Uni/year-4-cs/TTDS/CW3/ttds-14/website/book-search-client/src/App.js"],"names":["SearchPage","React","useState","useEffect","findQuote","setUp","App","state","setState","connectDB","isLoading","error"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;;AAEA,SAASC,GAAT,GAAc;AAAA;;AACV,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAC/BO,IAAAA,SAAS,EAAC;AACNC,MAAAA,SAAS,EAAC,KADJ;AAENC,MAAAA,KAAK,EAAC;AAFA;AADqB,GAAD,CAAlC,CADU,CASV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AAAA;AACI;AACA;AAAA,6BACA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAMH;;GAxCQL,G;;KAAAA,G;AAyCT,eAAeA,GAAf,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import './App.css';\nimport SearchPage from \"./views/SearchPage.js\";\nimport React, { useState,useEffect } from \"react\";\nimport findQuote from \"./api/findQuote.js\";\nimport setUp from \"./api/setUp.js\"\n\nfunction App(){\n    const [state, setState] = useState({\n        connectDB:{\n            isLoading:false,\n            error:\"\"\n        }\n    });\n\n\n    // useEffect(() => {\n    //     const setUpRequest = async () => {\n    //       setState({ ...state, connectDB: { ...state.connectDB, isLoading: true } });\n    //       await setUp()\n    //         .then(response => {\n    //           console.log(response);\n    //           setState({\n    //             ...state,\n    //             connectDB: {\n    //               isLoading: false,\n    //             }\n    //           });\n    //         })\n    //         .catch(errorResponse => {\n    //           setState({\n    //             ...state,\n    //             connectDB: { isLoading: false, error: errorResponse }\n    //           });\n    //         });\n    //     };\n    \n    //     setUpRequest();\n        \n    //   }, []); // empty list of dependencies ensures the hooks is only called upon rendering of the component\n\n    return(\n        //TODO: Display different component in case of a db connection error \n        <div>\n        <SearchPage/>\n        </div>\n    )\n}\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// class App extends React.Component {\n//   constructor(props) {\n//       super(props);\n//       this.state = { apiResponse: \"\" , quoteId: \"\"};\n//       this.getQuoteId = this.getQuoteId.bind(this);\n//       this.findQuote = this.findQuote.bind(this);\n//       this.setApiResponse = this.setApiResponse.bind(this);\n//   }\n\n//   async callAPI(route, options) {\n//     let quote = await fetch(`http://localhost:9000/${route}`, options);\n//     let res = await quote.json();\n//     console.log(\"res in callAPI is: \" + JSON.stringify(res));\n//     return res;\n//   }\n\n//   getQuoteId(event) {\n//     this.setState({quoteId: event.target.value});\n//   }\n\n//   setApiResponse(res) {\n//     // alert(\"res: \" + res);\n//     console.log(\"res in setAPIResponse: \" + JSON.stringify(res));\n//     this.setState({apiResponse: JSON.stringify(res.quote)});\n//   }\n\n//   async findQuote(event) {\n//     event.preventDefault();\n//     const requestOptions = {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({_id: this.state.quoteId})\n//     };\n//     let res = await this.callAPI(\"findQuote\", requestOptions);\n//     console.log(\"res in findQuote: \" + JSON.stringify(res));\n//     this.setApiResponse(res);\n//   }\n\n//   async componentDidMount() {\n//     let res = await this.callAPI(\"setUp\", {});\n//     console.log(res);\n//   }\n\n//   render() {\n//       return (\n//           <div>\n//               <SearchPage/>\n//               <input type=\"text\" value={this.state.quoteId} onChange={this.getQuoteId}></input>\n//               <button onClick={this.findQuote}>Click me</button>\n//               <p>{this.state.apiResponse}</p>\n//           </div>\n//       );\n//   }\n// }\n\n"]},"metadata":{},"sourceType":"module"}